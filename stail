#!/usr/bin/env node

var child  = require('child_process'),
    dns    = require('dns'),
    fs     = require('fs'),
    http   = require('http'),
    os     = require('os'),
    path   = require('path'),
    sys    = require('sys'),
    url    = require('url');

////////////////////////////////////////////////////////////////////////////////
// ARGUMENTS
////////////////////////////////////////////////////////////////////////////////
var port    = process.env.NODE_PORT || 8747; // -> "upgr"-ade
var host    = os.hostname();
var catchup = true;
var args    = process.argv.slice(2);
var paths   = [];

while (args.length) {
  var arg = args.shift();
  switch (arg) {
    case '-n': catchup = true; break;
    case '-p': port = args.shift(); break;
    default: paths.push(arg); break;
  }
}

paths.length || usage();

////////////////////////////////////////////////////////////////////////////////
// MAIN
////////////////////////////////////////////////////////////////////////////////
// First resolve the IP address
dns.lookup(host, function (_err, hostname) {
  var streams = [];
  
  // Initiate tail-f streams
  paths.forEach(function (p) {
    var file = path.basename(p);
    var tail = child.spawn('tail', ['-n', '0', '-F', p]);
    
    streams.push({'name': file, 'path': p, 'output': tail.stdout});
    tail.stderr.on('data', function (data) { console.error(data.trim()) });
    tail.on('exit', function (code) {
      // Remove stream after a tail crashed
      streams.forEach(function (s, i) { s.name === file && streams.splice(i, 1) })
    });
  });
  
  // Start server
  var server = http.createServer(function (req, res) {
    // Strip url path
    var path = url.parse(req.url).pathname.substring(1);
    // Find a tailed file stream given url path
    var found = false;
    streams.forEach(function (stream) {
      if (stream.name !== path) return; else found = true;
      res.writeHead(200, {'Content-Type': 'text/plain'});
      // Try catching up from the past and stream new tailed output
      if (catchup) fs.readFile(stream.path, function (err, content) {
        if (err) return notFound(res);
        reply(res, content);
      });
      stream.output.on('data', function (data) { reply(res, data) });
    });
    // No stream found
    if (!found) notFound(res)
  }).listen(port);
  
  streams.forEach(function(stream) {
    console.info('http://%s:%d/%s', hostname || host, port, stream.name);
  });
});

function reply(res, data) { res.write(data.stripEscapeChars()) }
function notFound(res) { res.writeHead(404); res.end() }
function usage() {
  console.info('Usage: ' + path.basename(process.argv[1]) + ' [options...] <file> ...');
  console.info('');
  console.info('Options:');
  console.info('   -n          Only show new file changes');
  console.info('   -p <port>   Set port for http server');
  process.exit(1);
}
////////////////////////////////////////////////////////////////////////////////
// EXTENSIONS
////////////////////////////////////////////////////////////////////////////////
if (!Buffer.prototype.trim) {
  Buffer.prototype.trim = function() {
    return this.toString().replace(/^\s+|\s+$/g, '');
  }
}

if (!Buffer.prototype.stripEscapeChars) {
  Buffer.prototype.stripEscapeChars = function() {
    return this.toString().replace(/\x1b\[[0-9;]+m/g, '');
  }
}
